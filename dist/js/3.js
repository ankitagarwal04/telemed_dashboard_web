(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[3],{

/***/ "./node_modules/chartist-plugin-tooltips-updated/dist/chartist-plugin-tooltip.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/chartist-plugin-tooltips-updated/dist/chartist-plugin-tooltip.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\r\n  if (root === undefined && window !== undefined) root = window;\r\n  if (true) {\r\n    // AMD. Register as an anonymous module unless amdModuleId is set\r\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! chartist */ \"./node_modules/chartist/dist/chartist.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (a0) {\r\n      return (root['Chartist.plugins.tooltip'] = factory(a0));\r\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n  } else {}\r\n}(this, function (Chartist) {\r\n\r\n/**\r\n * Chartist.js plugin to display a data label on top of the points in a line chart.\r\n *\r\n */\r\n/* global Chartist */\r\n(function (window, document, Chartist) {\r\n  'use strict';\r\n\r\n  var defaultOptions = {\r\n    currency: undefined,\r\n    currencyFormatCallback: undefined,\r\n    tooltipOffset: {\r\n      x: 0,\r\n      y: -20,\r\n    },\r\n    anchorToPoint: false,\r\n    appendToBody: true,\r\n    class: undefined,\r\n    pointClass: 'ct-point',\r\n  };\r\n\r\n  Chartist.plugins = Chartist.plugins || {};\r\n  Chartist.plugins.tooltip = function (options) {\r\n    options = Chartist.extend({}, defaultOptions, options);\r\n\r\n    return function tooltip(chart) {\r\n      // Warning: If you are using npm link or yarn link, these instanceof checks will fail and you won't any tooltips\r\n      var tooltipSelector = options.pointClass;\r\n      if (chart instanceof Chartist.Bar) {\r\n        tooltipSelector = 'ct-bar';\r\n      } else if (chart instanceof Chartist.Pie) {\r\n        // Added support for donut graph\r\n        if (chart.options.donut) {\r\n          // Added support for the solid donut graph\r\n          tooltipSelector = chart.options.donutSolid ? 'ct-slice-donut-solid' : 'ct-slice-donut';\r\n        } else {\r\n          tooltipSelector = 'ct-slice-pie';\r\n        }\r\n      }\r\n\r\n      var $chart = chart.container;\r\n      var $toolTipIsShown = false;\r\n      var $tooltipOffsetParent = offsetParent($chart);\r\n      var $toolTip;\r\n\r\n      if (!options.appendToBody) {\r\n        // searching for existing tooltip in the chart, because appendToBody is disabled\r\n        $toolTip = $chart.querySelector('.chartist-tooltip');\r\n      } else {\r\n        // searching for existing tooltip in the body, because appendToBody is enabled\r\n        $toolTip = document.querySelector('.chartist-tooltip');\r\n      }\r\n      if (!$toolTip) {\r\n        $toolTip = document.createElement('div');\r\n        $toolTip.className = (!options.class) ? 'chartist-tooltip' : 'chartist-tooltip ' + options.class;\r\n        if (!options.appendToBody) {\r\n          $chart.appendChild($toolTip);\r\n        } else {\r\n          document.body.appendChild($toolTip);\r\n        }\r\n      }\r\n      var height = $toolTip.offsetHeight;\r\n      var width = $toolTip.offsetWidth;\r\n\r\n      // hide($toolTip);\r\n\r\n      function on(event, selector, callback) {\r\n        $chart.addEventListener(event, function (e) {\r\n          if (!selector || hasClass(e.target, selector))\r\n            callback(e);\r\n        });\r\n      }\r\n\r\n      on('mouseover', tooltipSelector, function (event) {\r\n        var $point = event.target;\r\n        var tooltipText = '';\r\n\r\n        var isPieChart = (chart instanceof Chartist.Pie) ? $point : $point.parentNode;\r\n        var seriesName = (isPieChart) ? $point.parentNode.getAttribute('ct:meta') || $point.parentNode.getAttribute('ct:series-name') : '';\r\n        var meta = $point.getAttribute('ct:meta') || seriesName || '';\r\n        var hasMeta = !!meta;\r\n        var value = $point.getAttribute('ct:value');\r\n\r\n        if (options.transformTooltipTextFnc && typeof options.transformTooltipTextFnc === 'function') {\r\n          value = options.transformTooltipTextFnc(value);\r\n        }\r\n\r\n        if (options.tooltipFnc && typeof options.tooltipFnc === 'function') {\r\n          tooltipText = options.tooltipFnc(meta, value);\r\n        } else {\r\n          if (options.metaIsHTML) {\r\n            var txt = document.createElement('textarea');\r\n            txt.innerHTML = meta;\r\n            meta = txt.value;\r\n          }\r\n\r\n          meta = '<span class=\"chartist-tooltip-meta\">' + meta + '</span>';\r\n\r\n          if (hasMeta) {\r\n            tooltipText += meta + '<br>';\r\n          } else {\r\n            // For Pie Charts also take the labels into account\r\n            // Could add support for more charts here as well!\r\n            if (chart instanceof Chartist.Pie) {\r\n              var label = next($point, 'ct-label');\r\n              if (label) {\r\n                tooltipText += text(label) + '<br>';\r\n              }\r\n            }\r\n          }\r\n\r\n          if (value) {\r\n            if (options.currency) {\r\n              if (options.currencyFormatCallback != undefined) {\r\n                value = options.currencyFormatCallback(value, options);\r\n              } else {\r\n                value = options.currency + value.replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, '$1,');\r\n              }\r\n            }\r\n            value = '<span class=\"chartist-tooltip-value\">' + value + '</span>';\r\n            tooltipText += value;\r\n          }\r\n        }\r\n\r\n        if (tooltipText) {\r\n          $toolTip.innerHTML = tooltipText;\r\n\r\n          // Calculate new width and height, as toolTip width/height may have changed with innerHTML change\r\n          height = $toolTip.offsetHeight;\r\n          width = $toolTip.offsetWidth;\r\n\r\n          if (options.appendToBody !== true) {\r\n            $tooltipOffsetParent = offsetParent($chart);\r\n          }\r\n          if ($toolTip.style.display !== 'absolute') {\r\n            $toolTip.style.display = 'absolute';\r\n          }\r\n          setPosition(event);\r\n          show($toolTip);\r\n\r\n          // Remember height and width to avoid wrong position in IE\r\n          height = $toolTip.offsetHeight;\r\n          width = $toolTip.offsetWidth;\r\n        }\r\n      });\r\n\r\n      on('mouseout', tooltipSelector, function () {\r\n        hide($toolTip);\r\n      });\r\n\r\n      on('mousemove', null, function (event) {\r\n        if (options.anchorToPoint === false && $toolTipIsShown) {\r\n          setPosition(event);\r\n        }\r\n      });\r\n\r\n      function setPosition(event) {\r\n        height = height || $toolTip.offsetHeight;\r\n        width = width || $toolTip.offsetWidth;\r\n        var offsetX = -width / 2 + options.tooltipOffset.x;\r\n        var offsetY = -height + options.tooltipOffset.y;\r\n\r\n        var anchor = options.anchorToPoint === true && event.target.x2 && event.target.y2;\r\n\r\n        if (options.appendToBody === true) {\r\n          if (anchor) {\r\n            var box = $chart.getBoundingClientRect();\r\n            var left = event.target.x2.baseVal.value + box.left + window.pageXOffset;\r\n            var top = event.target.y2.baseVal.value + box.top + window.pageYOffset;\r\n\r\n            $toolTip.style.left = left + offsetX + 'px';\r\n            $toolTip.style.top = top + offsetY + 'px';\r\n          } else {\r\n            $toolTip.style.left = event.pageX + offsetX + 'px';\r\n            $toolTip.style.top = event.pageY + offsetY + 'px';\r\n          }\r\n        } else {\r\n          var offsetBox = $tooltipOffsetParent.getBoundingClientRect();\r\n          var allOffsetLeft = -offsetBox.left - window.pageXOffset + offsetX;\r\n          var allOffsetTop = -offsetBox.top - window.pageYOffset + offsetY;\r\n\r\n          if (anchor) {\r\n            var box = $chart.getBoundingClientRect();\r\n            var left = event.target.x2.baseVal.value + box.left + window.pageXOffset;\r\n            var top = event.target.y2.baseVal.value + box.top + window.pageYOffset;\r\n\r\n            $toolTip.style.left = left + allOffsetLeft + 'px';\r\n            $toolTip.style.top = top + allOffsetTop + 'px';\r\n          } else {\r\n            $toolTip.style.left = event.pageX + allOffsetLeft + 'px';\r\n            $toolTip.style.top = event.pageY + allOffsetTop + 'px';\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Shows the tooltip element, if not shown\r\n       * @param element\r\n       */\r\n      function show(element) {\r\n        $toolTipIsShown = true;\r\n        if (!hasClass(element, 'tooltip-show')) {\r\n          element.className = element.className + ' tooltip-show';\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Hides the tooltip element\r\n       * @param element\r\n       */\r\n      function hide(element) {\r\n        $toolTipIsShown = false;\r\n        var regex = new RegExp('tooltip-show' + '\\\\s*', 'gi');\r\n        element.className = element.className.replace(regex, '').trim();\r\n      }\r\n\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Returns whether a element has a css class called className\r\n   * @param element\r\n   * @param className\r\n   * @return {boolean}\r\n   */\r\n  function hasClass(element, className) {\r\n    return (' ' + element.getAttribute('class') + ' ').indexOf(' ' + className + ' ') > -1;\r\n  }\r\n\r\n  function next(element, className) {\r\n    do {\r\n      element = element.nextSibling;\r\n    } while (element && !hasClass(element, className));\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param element\r\n   * @return {string | string}\r\n   */\r\n  function text(element) {\r\n    return element.innerText || element.textContent;\r\n  }\r\n\r\n  /**\r\n   * Returns the first positioned parent of the element\r\n   * @return HTMLElement\r\n   */\r\n  function offsetParent(elem) {\r\n    if (offsetParent in elem) {\r\n      // Using the native property if possible\r\n      var parent = elem.offsetParent;\r\n\r\n      if (!parent) {\r\n        parent = document.body.parentElement;\r\n      }\r\n\r\n      return parent;\r\n    }\r\n\r\n    var parent = elem.parentNode;\r\n    if (!parent) {\r\n      return document.body.parentElement;\r\n    }\r\n\r\n    if (window.getComputedStyle(parent).position !== 'static') {\r\n      return parent;\r\n    } else if (parent.tagName === 'BODY') {\r\n      return parent.parentElement;\r\n    } else {\r\n      return offsetParent(parent);\r\n    }\r\n  }\r\n\r\n}(window, document, Chartist));\r\n\r\nreturn Chartist.plugins.tooltip;\r\n\r\n}));\r\n\n\n//# sourceURL=webpack:///./node_modules/chartist-plugin-tooltips-updated/dist/chartist-plugin-tooltip.js?");

/***/ }),

/***/ "./src/components/dashboard/CommonStats.js":
/*!*************************************************!*\
  !*** ./src/components/dashboard/CommonStats.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ \"./node_modules/core-js/modules/es.array.for-each.js\");\n/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.values.js */ \"./node_modules/core-js/modules/es.object.values.js\");\n/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _home_madrid_ankit_career_coding_code_csc_telemed_dashboard_telemed_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/format */ \"./node_modules/date-fns/format/index.js\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(date_fns_format__WEBPACK_IMPORTED_MODULE_12__);\n\n\n\n\n\n\n\n\n\n\n\n\n// PURPOSE FOR THIS FILE:\n// this file contain common js code between different user types.\n // https://www.npmjs.com/package/chartist-plugin-tooltips-updated\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  watch: {\n    selectedMerchants: function selectedMerchants(newSelectedMerchants) {\n      var _this = this;\n\n      this.merchantFilterSubText = this.updateFilterSubText('Merchant', newSelectedMerchants, this.cscMerchants);\n      var selectedMerchantsData = [];\n      this.cscMerchants.forEach(function (merchant) {\n        if (newSelectedMerchants.includes(merchant.id)) {\n          selectedMerchantsData.push(merchant);\n        }\n      }); // when none merchant is selected, fetch all merchant specialities\n      // else fetch only selected merchant sepcialities.\n\n      if (selectedMerchantsData.length === 0) {\n        // on no merchant select, mapped speciality filter are reset (to avoid confusion).\n        // keep this in promise.\n        new Promise(function (resolve, reject) {\n          _this.resetSpecialities();\n\n          resolve('');\n        }).then(function (response) {\n          _this.getMappedSpecialitiesFromMerchants(_this.cscMerchants);\n        });\n      } else {\n        this.getMappedSpecialitiesFromMerchants(selectedMerchantsData);\n      }\n    },\n    selectedSpecialities: function selectedSpecialities(newselectedSpecialities) {\n      this.specialityFilterSubText = this.updateFilterSubText('Speciality', newselectedSpecialities, this.specialities);\n    }\n  },\n  created: function created() {\n    // TODO: single request API to fetch required data on page load.\n    this.getConsultationStats();\n    this.getCscMerchants();\n    this.updateDatePickerFields();\n    this.getDoctorAvailableStats();\n  },\n  methods: {\n    getConsultationStats: function getConsultationStats() {\n      var _this2 = this;\n\n      this.$http.post('/dashboard_consultations/stats', {\n        consultation_filters: {\n          merchant_ids: this.selectedMerchants,\n          mapped_speciality_ids: this.selectedSpecialities,\n          date_from: this.datePicker.dateOne,\n          date_to: this.datePicker.dateTwo\n        }\n      }).then(function (response) {\n        var consultationStats = response;\n        var callDurationStats = consultationStats.call_duration_stats;\n        _this2.consultationStats.stats = consultationStats.consultation_stats ? consultationStats.consultation_stats : {}; // handling consultation stats chart\n\n        if (consultationStats.groupped_by_day) {\n          _this2.handleChartData('consultationStats', 'daily', consultationStats.groupped_by_day);\n        }\n\n        if (consultationStats.groupped_by_month) {\n          _this2.handleChartData('consultationStats', 'monthly', consultationStats.groupped_by_month);\n        } // handling call duration stats\n\n\n        _this2.callDurationStats.minCallDuration = callDurationStats.min_call_duration;\n        _this2.callDurationStats.avgCallDuration = callDurationStats.avg_call_duration;\n        _this2.callDurationStats.maxCallDuration = callDurationStats.max_call_duration;\n        _this2.callDurationStats.totalCallDuration = callDurationStats.total_call_duration;\n        _this2.callDurationStats.totalVideoConsultations = callDurationStats.total_video_consultations;\n\n        if (callDurationStats.groupped_by_day) {\n          _this2.handleChartData('callDurationStats', 'daily', callDurationStats.groupped_by_day);\n        }\n\n        if (callDurationStats.groupped_by_month) {\n          _this2.handleChartData('callDurationStats', 'monthly', callDurationStats.groupped_by_month);\n        }\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    },\n    resetSpecialities: function resetSpecialities() {\n      this.specialities = [];\n      this.specialityFilterValue = 0;\n      this.selectedSpecialities = [];\n      this.specialityFilterSubText = 'All Specialities';\n    },\n    getMappedSpecialitiesFromMerchants: function getMappedSpecialitiesFromMerchants(merchantResponse) {\n      if (merchantResponse.length > 0) {\n        var allMappedSpecialities = [];\n        var allMappedSpecialitiesIds = [];\n        merchantResponse.forEach(function (merchant) {\n          var mappedSpecialities = merchant.mapped_specialities;\n\n          if (mappedSpecialities.length > 0) {\n            mappedSpecialities.forEach(function (mappedSpeciality) {\n              var mappedSpecialityId = mappedSpeciality.id;\n\n              if (!allMappedSpecialitiesIds.includes(mappedSpecialityId)) {\n                allMappedSpecialitiesIds.push(mappedSpecialityId);\n                allMappedSpecialities.push({\n                  id: mappedSpecialityId,\n                  name: mappedSpeciality.name\n                });\n              }\n            });\n          }\n        });\n\n        if (allMappedSpecialitiesIds.length === 0) {\n          this.resetSpecialities();\n        } else {\n          this.setSpecialities(allMappedSpecialities, allMappedSpecialitiesIds);\n        }\n      } else {\n        this.resetSpecialities();\n      }\n    },\n    setSpecialities: function setSpecialities(mappedSpecialities, mappedSpecialitiesIds) {\n      var newselectedSpecialities = [];\n      this.specialities = mappedSpecialities;\n      this.specialityFilterValue = this.specialities.length;\n      this.selectedSpecialities.forEach(function (selectedSpecialityId) {\n        if (mappedSpecialitiesIds.includes(selectedSpecialityId)) {\n          newselectedSpecialities.push(selectedSpecialityId);\n        }\n      });\n      this.selectedSpecialities = newselectedSpecialities;\n      this.specialityFilterSubText = this.updateFilterSubText('Speciality', this.selectedSpecialities, this.specialities);\n    },\n    getCscMerchants: function getCscMerchants() {\n      var _this3 = this;\n\n      this.$http.get('/dashboard_csc_merchants/index').then(function (response) {\n        _this3.cscMerchants = response;\n        _this3.merchantFilterValue = _this3.cscMerchants.length;\n\n        _this3.getMappedSpecialitiesFromMerchants(response);\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    },\n    updateFilterSubText: function updateFilterSubText(operationOn, newSelectedFilters, filterDataItems) {\n      var filterSubtext = '';\n\n      if (newSelectedFilters.length > 0) {\n        var selectedFilterNames = [];\n        newSelectedFilters.forEach(function (selectedFilterId, index) {\n          filterDataItems.forEach(function (item, index) {\n            if (item.id === selectedFilterId) {\n              selectedFilterNames.push(item.name);\n            }\n          });\n        });\n        filterSubtext = selectedFilterNames.join(', ');\n      } else {\n        switch (operationOn) {\n          case 'Merchant':\n            filterSubtext = 'All Merchants';\n            break;\n\n          case 'Speciality':\n            filterSubtext = 'All Specialities';\n            break;\n\n          default:\n            filterSubtext = 'All';\n            break;\n        }\n      }\n\n      filterSubtext = this.getUpdatedFilterSubText(filterSubtext);\n      return filterSubtext;\n    },\n    closeFilterListDialog: function closeFilterListDialog(filterName) {\n      if (filterName === this.merchantFilterTitle) {\n        this.merchantListDialog = false;\n        this.getDoctorAvailableStats();\n      } else if (filterName === this.specialityFilterTitle) {\n        this.specialitiesListDialog = false;\n        this.getDoctorAvailableStats();\n      } else if (filterName === this.statesFilterTitle) {\n        this.stateListDialog = false;\n      } else if (filterName === this.districtsFilterTitle) {\n        this.districtListDialog = false;\n      }\n\n      this.getConsultationStats();\n    },\n    formatDates: function formatDates(datePicker) {\n      // on change of dates, required data is also filtered.\n      var formattedDates = '';\n      this.datePicker = datePicker;\n\n      if (datePicker.dateOne) {\n        formattedDates = date_fns_format__WEBPACK_IMPORTED_MODULE_12___default()(datePicker.dateOne, this.datePicker.dateFormat);\n      }\n\n      if (datePicker.dateTwo) {\n        formattedDates += ' - ' + date_fns_format__WEBPACK_IMPORTED_MODULE_12___default()(datePicker.dateTwo, this.datePicker.dateFormat);\n      } // this.datePicker.subText += '(' + formattedDates + ')'\n\n\n      this.datePicker.subText = formattedDates;\n      this.getConsultationStats();\n    },\n    resetDates: function resetDates() {\n      this.datePicker.dateOne = '';\n      this.datePicker.dateTwo = '';\n      this.datePicker.subText = '';\n      this.getConsultationStats();\n    },\n    updateDatePickerFields: function updateDatePickerFields() {\n      var d = new Date();\n      var date = d.getDate();\n      var month = d.getMonth();\n      var year = d.getFullYear(); // date format ('2021-02-20')\n      // using a day before today\n\n      this.datePicker.endDate = year + '-' + (month + 1) + '-' + (date - 1);\n    },\n    getDoctorAvailableStats: function getDoctorAvailableStats() {\n      var _this4 = this;\n\n      this.$http.post('/doctor_profiles/stats', {\n        doctor_profile_filters: {\n          merchant_ids: this.selectedMerchants,\n          mapped_speciality_ids: this.selectedSpecialities\n        }\n      }).then(function (response) {\n        _this4.handleDoctorAvailableStatsResponse(response);\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    },\n    handleDoctorAvailableStatsResponse: function handleDoctorAvailableStatsResponse(response) {\n      if (response.approved_doctor_profiles) {\n        this.doctorStats.approvedCount = response.approved_doctor_profiles.count;\n      }\n\n      if (response.groupped_by_week) {\n        this.handleChartData('doctorStats', 'weekly', response.groupped_by_week);\n      }\n\n      if (response.groupped_by_month) {\n        this.handleChartData('doctorStats', 'monthly', response.groupped_by_month);\n      }\n    },\n    fetchChartData: function fetchChartData(chartData) {\n      var chartDataLabels = Object.keys(chartData);\n      var chartDataSeries = [Object.values(chartData)];\n      var chartDataOptionHigh = 0;\n      chartDataOptionHigh = Math.max.apply(Math, Object(_home_madrid_ankit_career_coding_code_csc_telemed_dashboard_telemed_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(chartDataSeries[0])) + Math.max.apply(Math, Object(_home_madrid_ankit_career_coding_code_csc_telemed_dashboard_telemed_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(chartDataSeries[0])) / 4;\n\n      if (chartDataOptionHigh === 0) {\n        chartDataOptionHigh = 100;\n      }\n\n      return [chartDataLabels, chartDataSeries, chartDataOptionHigh];\n    },\n    handleChartData: function handleChartData(whoseStats, grouppingInterval, grouppedData) {\n      var specifiedIntervalData = this.fetchChartData(grouppedData);\n\n      if (whoseStats === 'doctorStats') {\n        if (grouppingInterval === 'weekly') {\n          this.doctorStats.grouppedByWeek.data.labels = specifiedIntervalData[0];\n          this.doctorStats.grouppedByWeek.data.series = specifiedIntervalData[1];\n          this.doctorStats.grouppedByWeek.options.high = specifiedIntervalData[2];\n        } else if (grouppingInterval === 'monthly') {\n          this.doctorStats.grouppedByMonth.data.labels = specifiedIntervalData[0];\n          this.doctorStats.grouppedByMonth.data.series = specifiedIntervalData[1];\n          this.doctorStats.grouppedByMonth.options.high = specifiedIntervalData[2];\n        }\n      } else if (whoseStats === 'consultationStats') {\n        if (grouppingInterval === 'daily') {\n          this.consultationStats.grouppedByDay.data.labels = specifiedIntervalData[0];\n          this.consultationStats.grouppedByDay.data.series = specifiedIntervalData[1];\n          this.consultationStats.grouppedByDay.options.high = specifiedIntervalData[2];\n        } else if (grouppingInterval === 'monthly') {\n          this.consultationStats.grouppedByMonth.data.labels = specifiedIntervalData[0];\n          this.consultationStats.grouppedByMonth.data.series = specifiedIntervalData[1];\n          this.consultationStats.grouppedByMonth.options.high = specifiedIntervalData[2];\n        }\n      } else if (whoseStats === 'callDurationStats') {\n        if (grouppingInterval === 'daily') {\n          this.callDurationStats.grouppedByDay.data.labels = specifiedIntervalData[0];\n          this.callDurationStats.grouppedByDay.data.series = specifiedIntervalData[1];\n          this.callDurationStats.grouppedByDay.options.high = specifiedIntervalData[2];\n        } else if (grouppingInterval === 'monthly') {\n          this.callDurationStats.grouppedByMonth.data.labels = specifiedIntervalData[0];\n          this.callDurationStats.grouppedByMonth.data.series = specifiedIntervalData[1];\n          this.callDurationStats.grouppedByMonth.options.high = specifiedIntervalData[2];\n        }\n      } else if (whoseStats === 'patientStats') {\n        if (grouppingInterval === 'weekly') {\n          this.patientStats.grouppedByWeek.data.labels = specifiedIntervalData[0];\n          this.patientStats.grouppedByWeek.data.series = specifiedIntervalData[1];\n          this.patientStats.grouppedByWeek.options.high = specifiedIntervalData[2];\n        } else if (grouppingInterval === 'monthly') {\n          this.patientStats.grouppedByMonth.data.labels = specifiedIntervalData[0];\n          this.patientStats.grouppedByMonth.data.series = specifiedIntervalData[1];\n          this.patientStats.grouppedByMonth.options.high = specifiedIntervalData[2];\n        }\n      }\n    },\n    getSubStats: function getSubStats(whoseStats) {\n      var subStats = {};\n\n      if (whoseStats === 'consultation') {\n        if (this.consultationStats.stats) {\n          subStats = [{\n            title: 'success',\n            count: this.consultationStats.stats.successful_count,\n            color: '#28a745',\n            icon: ['fas', 'arrow-up']\n          }, {\n            title: 'failed',\n            count: this.consultationStats.stats.unsuccessful_count,\n            color: '#dc3545',\n            icon: ['fas', 'arrow-down']\n          }];\n        }\n      } else if (whoseStats === 'call_duration') {\n        if (this.callDurationStats) {\n          subStats = [{\n            title: 'average',\n            count: this.callDurationStats.avgCallDuration,\n            color: '#17a2b8'\n          }, {\n            title: 'count',\n            count: this.callDurationStats.totalVideoConsultations,\n            color: '#17a2b8'\n          }];\n        }\n      }\n\n      return subStats;\n    },\n    getStatsCardIconBgColor: function getStatsCardIconBgColor(section) {\n      var color;\n\n      switch (section) {\n        case 'filter':\n          color = '#004a91';\n          break;\n\n        case 'stats':\n          color = '#368f8b';\n          break;\n\n        case 'graph':\n          color = 'lightOrange';\n          break;\n      }\n\n      return color;\n    },\n    getUpdatedFilterSubText: function getUpdatedFilterSubText(selectedFilters) {\n      var chosenFilters = selectedFilters.split(',');\n      var filterSubtext;\n\n      if (chosenFilters.length >= 3) {\n        filterSubtext = chosenFilters[0] + ', ' + chosenFilters[1] + ' + ' + \"\".concat(chosenFilters.length - 2) + 'more';\n      } else {\n        filterSubtext = selectedFilters;\n      }\n\n      return filterSubtext;\n    }\n  }\n});\n\n//# sourceURL=webpack:///./src/components/dashboard/CommonStats.js?");

/***/ })

}]);